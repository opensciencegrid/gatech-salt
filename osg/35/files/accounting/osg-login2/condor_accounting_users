#!/usr/bin/python

from __future__ import print_function
import argparse
import ldap
import sys
import tempfile
import textwrap
from os import unlink
from shutil import copyfile
from string import split,lower,upper

helpString = textwrap.fill('Generate a HTCondor map that contains a list of users and'
              ' and the accounting_group_user values that they may submit as.')
parser = argparse.ArgumentParser(description=helpString,
                                 formatter_class=argparse.RawTextHelpFormatter)
reqargs = parser.add_argument_group('Required arguments')
reqargs.add_argument("-s","--site", required=True, type=str,
  help='3 character name of site as in LDAP, e.g. UWM,HAN,SYR...')
optargs = parser.add_argument_group('Optional arguments')
optargs.add_argument("-f","--file", required=False, type=str,
  help='Output filename, e.g. /etc/condor/accounting/valid_users')
optargs.add_argument("-c","--cron", required=False, action='store_true',
  default=False, help='Disable stderr output when writing to file')
args = parser.parse_args()

accounts = []
shared_accounts = []
allowed_users = {}
groups = [ 'Communities:LVC:LSC:LDG:%(site)s:LDG%(site)sUsers' % {'site': upper(args.site)},
           'Communities:LSCVirgoLIGOGroupMembers' ]
attrNames = []
site_username_key = 'x-LIGO-uid;x-ligo-ldg-%s' % lower(args.site)
ldg_username_key = 'x-LIGO-uid'
ligo_username_key = 'uid'
attrNames.append(site_username_key)
attrNames.append(ldg_username_key)

searchfilter = '(&'
for group in groups:
  searchfilter += '(isMemberOf=%s)' % group
searchfilter += '(x-LIGO-uid=*))'

myldap = ldap.initialize('ldaps://ldap.ligo.org')
try:
  myldap.simple_bind_s()
except ldap.SERVER_DOWN:
  print('Unable to connect to LDAP server',file=sys.stderr)
  sys.exit(1)
except ldap.CONNECT_ERROR:
  print('Unable to connect to LDAP server',file=sys.stderr)
  sys.exit(1)

try:
  results = myldap.search_s('ou=people,dc=ligo,dc=org', ldap.SCOPE_ONELEVEL,
                          searchfilter, [ldg_username_key,ligo_username_key])
except ldap.LDAPError:
  print('Unable to search LDAP server',file=sys.stderr)
  sys.exit(1)

# disconnect from LDAP
try:
  myldap.unbind_s()
except ldap.LDAPError:
  print('Error disconnecting from LDAP',file=sys.stderr)
  sys.exit(1)

for member in results:
  (distinguishedName, attributeDict) = member

  # search site specific username list first, break if successful
  if site_username_key in attributeDict:
    logins = split(attributeDict[site_username_key][0],',')
  elif ldg_username_key in attributeDict:
    logins = split(attributeDict[ldg_username_key][0],',')
  else:
    continue

  accounts.extend(logins)
  if len(logins) > 1:
    shared_accounts.extend(logins[1:])

  for login in logins:
    if login not in allowed_users:
      allowed_users[login] = []
    allowed_users[login].extend(attributeDict['uid'])

accounts = sorted(set(accounts))
shared_accounts = sorted(set(shared_accounts))

out = tempfile.NamedTemporaryFile(delete=False) if args.file else sys.stdout
for user in sorted(allowed_users):
  out.write("* %(user)s " % { 'user': user })
  if user in shared_accounts:
    out.write(",".join(sorted(allowed_users[user])))
  else:
    out.write(",".join(sorted(set(allowed_users[user] + [user]))))
  out.write("\n")

if args.file:
  out.close()
  copyfile(out.name, args.file)
  unlink(out.name)
  if not args.cron:
    print('HTCondor user permissions: Found %d accounts of which %d are shared.'
      % (len(accounts), len(shared_accounts)), file=sys.stderr)
